import os
import json
import asyncio
import enum
from datetime import datetime, timedelta, timezone
from typing import Optional, Literal, List

from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.exceptions import TelegramBadRequest

from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse

from pydantic import BaseModel, Field
from sqlalchemy import (
    create_engine, select, func, text, String, DateTime, Integer, Enum, JSON as SA_JSON
)
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, sessionmaker
from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker, AsyncAttrs, AsyncSession

from dotenv import load_dotenv

# -----------------------------
# ENV / CONFIG
# -----------------------------
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")

ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "").replace(" ", "").split(",") if x]
USE_WEBHOOK = os.getenv("USE_WEBHOOK", "false").lower() == "true"
WEBAPP_HOST = os.getenv("WEBAPP_HOST", "0.0.0.0")
WEBAPP_PORT = int(os.getenv("WEBAPP_PORT", "8000"))
WEBHOOK_BASE = os.getenv("WEBHOOK_BASE", "").rstrip("/")

# –ë–∞–∑–∞ SQLite (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
DB_URL = os.getenv("DB_URL")

MOSCOW_TZ = timezone(timedelta(hours=3))


# -----------------------------
# DB MODELS
# -----------------------------
class Base(AsyncAttrs, DeclarativeBase):
    pass

class OrderStatus(str, enum.Enum):
    processing = "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
    done = "–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
    canceled = "–∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω"

class Order(Base):
    __tablename__ = "orders"

    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    created_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))
    updated_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc), onupdate=lambda: datetime.now(timezone.utc))
    status: Mapped[OrderStatus] = mapped_column(Enum(OrderStatus), default=OrderStatus.processing, nullable=False)
    source: Mapped[str] = mapped_column(String(50), default="site")  # –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ (site/api/‚Ä¶)
    data: Mapped[dict] = mapped_column(SA_JSON, default=dict)        # –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ (–∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –∫–æ—Ä–∑–∏–Ω–∞, —Å—É–º–º—ã –∏ —Ç.–¥.)

# Async engine & session
async_engine = create_async_engine(DB_URL, echo=False, future=True)
AsyncSessionLocal: async_sessionmaker[AsyncSession] = async_sessionmaker(async_engine, expire_on_commit=False)


async def init_db():
    async with async_engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)


# -----------------------------
# BOT INIT
# -----------------------------
bot = Bot(BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()
router = Router()
dp.include_router(router)

# -----------------------------
# HELPERS
# -----------------------------
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def status_to_slug(s: OrderStatus | str) -> str:
    # –¥–ª—è –∫–æ–º–∞–Ω–¥ /orders_processing etc.
    if isinstance(s, OrderStatus):
        ru = s.value
    else:
        ru = s
    mapping = {
        OrderStatus.processing.value: "processing",
        OrderStatus.done.value: "done",
        OrderStatus.canceled.value: "canceled",
    }
    return mapping.get(ru, "processing")

def slug_to_status(slug: str) -> OrderStatus:
    slug = slug.lower()
    if slug in ("processing", "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"):
        return OrderStatus.processing
    if slug in ("done", "–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", "accepted", "accept"):
        return OrderStatus.done
    if slug in ("canceled", "cancelled", "–∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω", "–æ—Ç–º–µ–Ω–µ–Ω", "–æ—Ç–º–µ–Ω—ë–Ω"):
        return OrderStatus.canceled
    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return OrderStatus.processing

def human_dt(dt: datetime) -> str:
    # –ü–µ—Ä–µ–≤–æ–¥ –≤ ¬´–ø–∞—Ä–∏–∂—Å–∫–æ–µ¬ª –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    local = dt.astimezone(MOSCOW_TZ)
    return local.strftime("%Y-%m-%d %H:%M")

def build_status_kb(order_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõ† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è", callback_data=f"st:{order_id}:processing")],
        [InlineKeyboardButton(text="‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ", callback_data=f"st:{order_id}:done")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω", callback_data=f"st:{order_id}:canceled")],
    ])

async def order_text(o: Order) -> str:
    # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–∞
    parts = [
        f"<b>–ó–∞–∫–∞–∑ #{o.id}</b>",
        f"–°—Ç–∞—Ç—É—Å: <b>{o.status.value}</b>",
        f"–°–æ–∑–¥–∞–Ω: {human_dt(o.created_at)}",
    ]
    # –£–¥–æ–±–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
    name = o.data.get("name") or o.data.get("customer_name")
    phone = o.data.get("phone") or o.data.get("customer_phone")
    total = o.data.get("total") or o.data.get("amount")
    if name: parts.append(f"–ò–º—è: {name}")
    if phone: parts.append(f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
    if total: parts.append(f"–°—É–º–º–∞: {total}")

    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π JSON (–æ–±—Ä–µ–∑–∞–µ–º)
    raw = json.dumps(o.data, ensure_ascii=False)
    if len(raw) > 700:
        raw = raw[:700] + "‚Ä¶"
    parts.append(f"<code>{raw}</code>")
    return "\n".join(parts)

async def notify_admins_new_order(o: Order):
    text = await order_text(o)
    kb = build_status_kb(o.id)
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, f"üÜï –ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n{text}", reply_markup=kb)
        except TelegramBadRequest:
            pass


def parse_period(arg: Optional[str]) -> Optional[tuple[datetime, datetime]]:
    if not arg:
        return None
    now = datetime.now(timezone.utc)
    arg = arg.lower()
    if arg.isdigit():
        # —ç—Ç–æ –Ω–µ –ø–µ—Ä–∏–æ–¥, –∞ –∫–æ–ª-–≤–æ ‚Äî –≤–µ—Ä–Ω—ë–º None, –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –¥—Ä—É–≥–æ–π –±–ª–æ–∫
        return None
    if arg in ("day", "today"):
        start = now - timedelta(days=1)
    elif arg in ("week",):
        start = now - timedelta(days=7)
    elif arg in ("month",):
        start = now - timedelta(days=30)
    elif arg in ("year",):
        start = now - timedelta(days=365)
    else:
        return None
    return (start, now)

def parse_count_or_period(arg: Optional[str]) -> tuple[Optional[int], Optional[tuple[datetime, datetime]]]:
    if not arg:
        return (None, None)
    if arg.isdigit():
        return (int(arg), None)
    per = parse_period(arg)
    return (None, per) if per else (None, None)


async def fetch_orders(session: AsyncSession,
                       status: Optional[OrderStatus] = None,
                       limit: Optional[int] = None,
                       period: Optional[tuple[datetime, datetime]] = None):
    stmt = select(Order).order_by(Order.id.desc())
    if status:
        stmt = stmt.filter(Order.status == status)
    if period:
        start, end = period
        stmt = stmt.filter(Order.created_at >= start, Order.created_at <= end)
    if limit:
        stmt = stmt.limit(limit)
    res = await session.execute(stmt)
    return list(res.scalars())


# -----------------------------
# FASTAPI (–ø—Ä–∏—ë–º –∑–∞–∫–∞–∑–æ–≤ —Å —Å–∞–π—Ç–∞)
# -----------------------------
class IncomingOrder(BaseModel):
    # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –ø–æ–ª—è ‚Äî –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª—é–±—ã–µ, –≤—Å—ë –ø–æ–ø–∞–¥—ë—Ç –≤ .data
    order_id: Optional[str] = None
    name: Optional[str] = None
    phone: Optional[str] = None
    email: Optional[str] = None
    total: Optional[float] = None
    items: Optional[list] = Field(default_factory=list)
    meta: Optional[dict] = Field(default_factory=dict)

api = FastAPI()

@api.post("/orders/new")
async def new_order_endpoint(payload: IncomingOrder, request: Request):
    # –°–∞–π—Ç —à–ª—ë—Ç POST JSON ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
    async with AsyncSessionLocal() as session:
        order = Order(
            status=OrderStatus.processing,
            source="site",
            data=json.loads(payload.model_dump_json())
        )
        session.add(order)
        await session.commit()
        await session.refresh(order)

    # –£–≤–µ–¥–æ–º–∏–º –∞–¥–º–∏–Ω–æ–≤
    await notify_admins_new_order(order)

    return JSONResponse({"ok": True, "order_id": order.id})


# -----------------------------
# BOT COMMANDS
# -----------------------------
@router.message(Command("start"))
async def cmd_start(msg: Message):
    await msg.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∑–∞–∫–∞–∑–æ–≤.\n\n"
        "‚Ä¢ –°–∞–π—Ç –º–æ–∂–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã —á–µ—Ä–µ–∑ POST /orders/new (—Å–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é)\n"
        "‚Ä¢ –ê–¥–º–∏–Ω—ã –ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å–∞–º–∏.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:\n"
        "/all_orders [N|day|week|month|year]\n"
        "/orders_processing [N|day|week|month|year]\n"
        "/orders_done [N|day|week|month|year]\n"
        "/orders_canceled [N|day|week|month|year]\n"
        "/set_status <order_id> <processing|done|canceled>\n"
    )

def admin_only(func):
    async def wrapper(msg: Message, *args, **kwargs):
        if not is_admin(msg.from_user.id):
            return await msg.reply("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return await func(msg, *args, **kwargs)
    return wrapper

@router.message(Command("all_orders"))
@admin_only
async def cmd_all_orders(msg: Message, command: CommandObject):
    arg = (command.args or "").strip() or None
    limit, period = parse_count_or_period(arg)
    async with AsyncSessionLocal() as session:
        orders = await fetch_orders(session, None, limit, period)
    if not orders:
        return await msg.reply("–ó–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    # –û—Ç—Å—ã–ª–∞–µ–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—É–¥–æ–±–Ω–æ —Å inline‚Äë–∫–Ω–æ–ø–∫–∞–º–∏)
    for o in orders:
        await msg.answer(await order_text(o), reply_markup=build_status_kb(o.id))

async def _status_cmd(msg: Message, command: CommandObject, status: OrderStatus):
    arg = (command.args or "").strip() or None
    limit, period = parse_count_or_period(arg)
    async with AsyncSessionLocal() as session:
        orders = await fetch_orders(session, status, limit, period)
    if not orders:
        return await msg.reply("–ó–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    for o in orders:
        await msg.answer(await order_text(o), reply_markup=build_status_kb(o.id))

@router.message(Command("orders_processing"))
@admin_only
async def cmd_orders_processing(msg: Message, command: CommandObject):
    await _status_cmd(msg, command, OrderStatus.processing)

@router.message(Command("orders_done"))
@admin_only
async def cmd_orders_done(msg: Message, command: CommandObject):
    await _status_cmd(msg, command, OrderStatus.done)

@router.message(Command("orders_canceled"))
@admin_only
async def cmd_orders_canceled(msg: Message, command: CommandObject):
    await _status_cmd(msg, command, OrderStatus.canceled)

@router.message(Command("set_status"))
@admin_only
async def cmd_set_status(msg: Message, command: CommandObject):
    # /set_status 15 done
    if not command.args:
        return await msg.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_status <order_id> <processing|done|canceled>")
    try:
        parts = command.args.split()
        order_id = int(parts[0])
        new_status = slug_to_status(parts[1]) if len(parts) > 1 else OrderStatus.processing
    except Exception:
        return await msg.reply("–ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã. –ü—Ä–∏–º–µ—Ä: /set_status 15 done")

    async with AsyncSessionLocal() as session:
        o = await session.get(Order, order_id)
        if not o:
            return await msg.reply(f"–ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        o.status = new_status
        await session.commit()
        await session.refresh(o)

    await msg.reply(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: <b>{new_status.value}</b>")

# Inline‚Äë–∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
@router.callback_query(F.data.startswith("st:"))
async def cb_change_status(cq: CallbackQuery):
    if not is_admin(cq.from_user.id):
        return await cq.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", show_alert=True)
    try:
        _, sid, slug = cq.data.split(":")
        order_id = int(sid)
        new_status = slug_to_status(slug)
    except Exception:
        return await cq.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞", show_alert=True)

    async with AsyncSessionLocal() as session:
        o = await session.get(Order, order_id)
        if not o:
            return await cq.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        o.status = new_status
        await session.commit()
        await session.refresh(o)

    # –û–±–Ω–æ–≤–∏–º –∫–Ω–æ–ø–∫–∏ –∏ —Ç–µ–∫—Å—Ç
    try:
        await cq.message.edit_text(await order_text(o), reply_markup=build_status_kb(o.id))
    except TelegramBadRequest:
        pass
    await cq.answer(f"–°—Ç–∞—Ç—É—Å: {new_status.value}")

# -----------------------------
# STARTUP / WEBHOOK / POLLING
# -----------------------------
@api.on_event("startup")
async def on_startup():
    await init_db()
    if USE_WEBHOOK:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞ /tg/webhook
        webhook_url = f"{WEBHOOK_BASE}/tg/webhook"
        await bot.set_webhook(webhook_url)
    else:
        # –£–±–∏—Ä–∞–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        try:
            await bot.delete_webhook(drop_pending_updates=True)
        except:
            pass
    print("‚úÖ Startup complete")

@api.post("/tg/webhook")
async def tg_webhook(request: Request):
    if not USE_WEBHOOK:
        raise HTTPException(403, "Webhook disabled")
    update = await request.json()
    await dp.feed_update(bot, update)
    return JSONResponse({"ok": True})

# –§–æ–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ long polling, –µ—Å–ª–∏ –Ω–µ –≤–µ–±—Ö—É–∫
async def _run_polling():
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

def main():
    if USE_WEBHOOK:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–µ–±‚Äë—Å–µ—Ä–≤–µ—Ä FastAPI (webhook –¥–µ—Ä–≥–∞–µ—Ç –±–æ—Ç–∞)
        import uvicorn
        uvicorn.run(api, host=WEBAPP_HOST, port=WEBAPP_PORT)
    else:
        # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI + –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ polling
        import uvicorn
        loop = asyncio.get_event_loop()

        async def runner():
            config = uvicorn.Config(api, host=WEBAPP_HOST, port=WEBAPP_PORT, log_level="info")
            server = uvicorn.Server(config)
            # –ó–∞–ø—É—Å—Ç–∏–º —Å–µ—Ä–≤–µ—Ä –∏ polling –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            poll_task = asyncio.create_task(_run_polling())
            await server.serve()
            # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –∑–∞–≤–µ—Ä—à–∏–º polling
            if not poll_task.done():
                poll_task.cancel()

        loop.run_until_complete(runner())

if __name__ == "__main__":
    main()
